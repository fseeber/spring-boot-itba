# docker-compose.yml
version: '3.8' # Especifica la versión del formato de Docker Compose

services:
  app:
    build:
      context: . # El contexto de construcción es el directorio actual (donde está el Dockerfile)
      dockerfile: Dockerfile # Especifica el nombre del Dockerfile
    container_name: spring-boot-app # Nombre amigable para el contenedor
    ports:
      - "8080:8080" # Mapea el puerto 8080 del host al puerto 8080 del contenedor
    # environment: # Variables de entorno para tu aplicación Spring Boot (opcional)
    #   SPRING_DATASOURCE_URL: jdbc:h2:mem:alumnosdb # Aunque H2 es en memoria, si tuvieras variables de entorno para DBs externas, irían aquí
    #   SPRING_DATASOURCE_USERNAME: sa
    #   SPRING_DATASOURCE_PASSWORD: ""
    #   SPRING_JPA_HIBERNATE_DDL_AUTO: update # Puedes sobrescribir propiedades de Spring Boot aquí
    #   SPRING_H2_CONSOLE_ENABLED: "true"
    #   SPRING_H2_CONSOLE_PATH: /h2-console
    environment: # Variables de entorno para tu aplicación dentro del contenedor
      SPRING_RABBITMQ_HOST: rabbitmq-host # MUY IMPORTANTE: usa el nombre del servicio de RabbitMQ aquí
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      APP_RABBITMQ_QUEUE_NAME: cursos.creacion # Tu propiedad personalizada
    depends_on: # Asegura que rabbitmq-host se inicie antes que la app
      - rabbitmq-host  
  rabbitmq-host: # Define el servicio de RabbitMQ
    image: rabbitmq:3-management-alpine # Imagen oficial de RabbitMQ con la interfaz de gestión
    container_name: rabbitmq-container
    ports:
      - "5672:5672"   # Puerto AMQP para la comunicación de tu app
      - "15672:15672" # Puerto para la interfaz de gestión web (accede vía http://localhost:15672)
    environment: # Credenciales por defecto para RabbitMQ
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    
    # volumes: # Si tuvieras datos persistentes o archivos de logs que quisieras mapear al host
    #   - ./logs:/app/logs # Ejemplo: mapea un directorio 'logs' del host a /app/logs dentro del contenedor
    
    # depends_on: # Si tuvieras otros servicios (ej. una DB externa) de los que dependiera tu app
    #   - database # Ejemplo: espera a que el servicio 'database' esté listo